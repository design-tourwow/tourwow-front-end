// Cache Cleaner Utility - ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö

export class CacheCleaner {
  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå localStorage
  static clearLocalStorage() {
    if (typeof window !== 'undefined') {
      console.log('üóëÔ∏è Clearing localStorage...');
      localStorage.clear();
      console.log('‚úÖ localStorage cleared');
    }
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå sessionStorage
  static clearSessionStorage() {
    if (typeof window !== 'undefined') {
      console.log('üóëÔ∏è Clearing sessionStorage...');
      sessionStorage.clear();
      console.log('‚úÖ sessionStorage cleared');
    }
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå browser cache
  static async clearBrowserCache() {
    if (typeof window !== 'undefined' && 'caches' in window) {
      console.log('üóëÔ∏è Clearing browser cache...');
      try {
        const cacheNames = await caches.keys();
        await Promise.all(
          cacheNames.map(cacheName => {
            console.log(`üóëÔ∏è Deleting cache: ${cacheName}`);
            return caches.delete(cacheName);
          })
        );
        console.log('‚úÖ Browser cache cleared');
      } catch (error) {
        console.error('‚ùå Error clearing browser cache:', error);
      }
    }
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå service worker cache
  static async clearServiceWorkerCache() {
    if (typeof window !== 'undefined' && 'serviceWorker' in navigator) {
      console.log('üóëÔ∏è Clearing service worker cache...');
      try {
        const registrations = await navigator.serviceWorker.getRegistrations();
        await Promise.all(
          registrations.map(registration => {
            console.log(`üóëÔ∏è Unregistering service worker: ${registration.scope}`);
            return registration.unregister();
          })
        );
        console.log('‚úÖ Service worker cache cleared');
      } catch (error) {
        console.error('‚ùå Error clearing service worker cache:', error);
      }
    }
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå IndexedDB
  static async clearIndexedDB() {
    if (typeof window !== 'undefined' && 'indexedDB' in window) {
      console.log('üóëÔ∏è Clearing IndexedDB...');
      try {
        const databases = await window.indexedDB.databases();
        await Promise.all(
          databases.map(db => {
            console.log(`üóëÔ∏è Deleting IndexedDB: ${db.name}`);
            return window.indexedDB.deleteDatabase(db.name);
          })
        );
        console.log('‚úÖ IndexedDB cleared');
      } catch (error) {
        console.error('‚ùå Error clearing IndexedDB:', error);
      }
    }
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏Ñ‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  static async clearAllCaches() {
    console.log('üöÄ Starting complete cache cleanup...');
    
    // Clear all storage types
    this.clearLocalStorage();
    this.clearSessionStorage();
    await this.clearBrowserCache();
    await this.clearServiceWorkerCache();
    await this.clearIndexedDB();
    
    console.log('‚úÖ Complete cache cleanup finished');
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  static async clearSpecificCache(type: 'localStorage' | 'sessionStorage' | 'browser' | 'serviceWorker' | 'indexedDB') {
    switch (type) {
      case 'localStorage':
        this.clearLocalStorage();
        break;
      case 'sessionStorage':
        this.clearSessionStorage();
        break;
      case 'browser':
        await this.clearBrowserCache();
        break;
      case 'serviceWorker':
        await this.clearServiceWorkerCache();
        break;
      case 'indexedDB':
        await this.clearIndexedDB();
        break;
    }
  }

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏Ñ‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
  static startAutoClear(intervalMinutes: number = 5) {
    if (typeof window !== 'undefined') {
      console.log(`üîÑ Starting auto-clear every ${intervalMinutes} minutes...`);
      setInterval(() => {
        console.log('üïê Auto-clearing cache...');
        this.clearAllCaches();
      }, intervalMinutes * 60 * 1000);
    }
  }

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏Ñ‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  static stopAutoClear() {
    if (typeof window !== 'undefined') {
      console.log('‚èπÔ∏è Stopping auto-clear...');
      // Clear all intervals (this is a simplified approach)
      for (let i = 1; i < 1000; i++) {
        window.clearInterval(i);
      }
    }
  }
}

// Export for use in components
export default CacheCleaner; 