
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProductPoolScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  productRunningId: 'productRunningId',
  productId: 'productId',
  periodId: 'periodId',
  productSubCategoryId: 'productSubCategoryId',
  productTourCode: 'productTourCode',
  productTourwowCode: 'productTourwowCode',
  productTwUrlPath: 'productTwUrlPath',
  productName: 'productName',
  productStartAt: 'productStartAt',
  productPrice: 'productPrice',
  productPriceCompare: 'productPriceCompare',
  productHasOneCountry: 'productHasOneCountry',
  productMainCountryId: 'productMainCountryId',
  productMainCountryNameTh: 'productMainCountryNameTh',
  productMainCountryNameEn: 'productMainCountryNameEn',
  productCountries: 'productCountries',
  productCountrySubUnits: 'productCountrySubUnits',
  productTags: 'productTags',
  productTagsJson: 'productTagsJson',
  productDurationDay: 'productDurationDay',
  productDurationNight: 'productDurationNight',
  productDurationDayAndNight: 'productDurationDayAndNight',
  productFreeDay: 'productFreeDay',
  productMealAmount: 'productMealAmount',
  productHotelStar: 'productHotelStar',
  productHasVisa: 'productHasVisa',
  productVisaPrice: 'productVisaPrice',
  productHilightDescription: 'productHilightDescription',
  productSubCategoryLabel: 'productSubCategoryLabel',
  productBannerUrl: 'productBannerUrl',
  productHasActivePeriods: 'productHasActivePeriods',
  productIsRecommended: 'productIsRecommended',
  periodGroupCode: 'periodGroupCode',
  periodStartAt: 'periodStartAt',
  periodEndAt: 'periodEndAt',
  periodIsChannelTwpOnlineBooking: 'periodIsChannelTwpOnlineBooking',
  periodPriceAdultDouble: 'periodPriceAdultDouble',
  periodPriceAdultSingle: 'periodPriceAdultSingle',
  periodPriceAdultTripple: 'periodPriceAdultTripple',
  periodPriceChildNoBed: 'periodPriceChildNoBed',
  periodPriceChildBed: 'periodPriceChildBed',
  periodPriceInfant: 'periodPriceInfant',
  periodPriceJoinLand: 'periodPriceJoinLand',
  periodPriceAdultDoubleCompare: 'periodPriceAdultDoubleCompare',
  periodPriceAdultSingleCompare: 'periodPriceAdultSingleCompare',
  periodPriceAdultTrippleCompare: 'periodPriceAdultTrippleCompare',
  periodPriceChildNoBedCompare: 'periodPriceChildNoBedCompare',
  periodPriceChildBedCompare: 'periodPriceChildBedCompare',
  periodPriceInfantCompare: 'periodPriceInfantCompare',
  periodPriceJoinLandCompare: 'periodPriceJoinLandCompare',
  periodDeposit: 'periodDeposit',
  periodCommission: 'periodCommission',
  periodCommissionCompany: 'periodCommissionCompany',
  periodCommissionSeller: 'periodCommissionSeller',
  periodQuantity: 'periodQuantity',
  periodQuantityRemaining: 'periodQuantityRemaining',
  periodSellStatusCode: 'periodSellStatusCode',
  periodIsActive: 'periodIsActive',
  periodDeal: 'periodDeal',
  periodConfig: 'periodConfig',
  periodInstallmentCount: 'periodInstallmentCount',
  periodTransportationCategoryId: 'periodTransportationCategoryId',
  periodTransportationCategoryName: 'periodTransportationCategoryName',
  periodGoTransportationId: 'periodGoTransportationId',
  periodGoTransportationNameEn: 'periodGoTransportationNameEn',
  periodGoTransportationCode: 'periodGoTransportationCode',
  periodGoAirportArrival: 'periodGoAirportArrival',
  periodGoAirportDeparture: 'periodGoAirportDeparture',
  periodGoFlightNumberArrival: 'periodGoFlightNumberArrival',
  periodGoFlightNumberDeparture: 'periodGoFlightNumberDeparture',
  periodGoFlightTimeArrival: 'periodGoFlightTimeArrival',
  periodGoFlightTimeDeparture: 'periodGoFlightTimeDeparture',
  periodBackTransportationId: 'periodBackTransportationId',
  periodBackTransportationNameEn: 'periodBackTransportationNameEn',
  periodBackTransportationCode: 'periodBackTransportationCode',
  periodBackAirportArrival: 'periodBackAirportArrival',
  periodBackAirportDeparture: 'periodBackAirportDeparture',
  periodBackFlightNumberArrival: 'periodBackFlightNumberArrival',
  periodBackFlightNumberDeparture: 'periodBackFlightNumberDeparture',
  periodBackFlightTimeArrival: 'periodBackFlightTimeArrival',
  periodBackFlightTimeDeparture: 'periodBackFlightTimeDeparture',
  createdAt: 'createdAt'
};

exports.Prisma.AgencyBlogScalarFieldEnum = {
  id: 'id',
  agencyId: 'agencyId',
  title: 'title',
  tags: 'tags',
  createdAt: 'createdAt',
  createdByAgencyMemberId: 'createdByAgencyMemberId',
  updatedAt: 'updatedAt',
  updatedByAgencyMemberId: 'updatedByAgencyMemberId',
  deletedAt: 'deletedAt',
  deletedByAgencyMemberId: 'deletedByAgencyMemberId'
};

exports.Prisma.SeoArticleScalarFieldEnum = {
  id: 'id',
  agencyId: 'agencyId',
  parentArticleId: 'parentArticleId',
  isChildOfHomePage: 'isChildOfHomePage',
  isActive: 'isActive',
  seoArticleTypeId: 'seoArticleTypeId',
  seoTargetPageTypeId: 'seoTargetPageTypeId',
  seoSpecialPageId: 'seoSpecialPageId',
  countryId: 'countryId',
  provinceId: 'provinceId',
  countrySubUnitId: 'countrySubUnitId',
  proCategorySubProductId: 'proCategorySubProductId',
  code: 'code',
  name: 'name',
  urlPath: 'urlPath',
  trimmedUrlPath: 'trimmedUrlPath',
  realUrlPath: 'realUrlPath',
  metaTitle: 'metaTitle',
  metaDescription: 'metaDescription',
  primaryKeyword: 'primaryKeyword',
  secondaryKeyword: 'secondaryKeyword',
  relatedKeyword: 'relatedKeyword',
  note: 'note',
  desktopCoverImageFileName: 'desktopCoverImageFileName',
  desktopCoverImageFileSize: 'desktopCoverImageFileSize',
  desktopCoverImageContentType: 'desktopCoverImageContentType',
  desktopCoverImageUpdatedAt: 'desktopCoverImageUpdatedAt',
  mobileCoverImageFileName: 'mobileCoverImageFileName',
  mobileCoverImageFileSize: 'mobileCoverImageFileSize',
  mobileCoverImageContentType: 'mobileCoverImageContentType',
  mobileCoverImageUpdatedAt: 'mobileCoverImageUpdatedAt',
  coverImageAltText: 'coverImageAltText',
  content: 'content',
  hasContent: 'hasContent',
  tags: 'tags',
  createdAt: 'createdAt',
  createdByAgencyMemberId: 'createdByAgencyMemberId',
  updatedAt: 'updatedAt',
  updatedByAgencyMemberId: 'updatedByAgencyMemberId'
};

exports.Prisma.TwPageScalarFieldEnum = {
  id: 'id',
  agencyId: 'agencyId',
  urlPath: 'urlPath',
  redirectToUrlPath: 'redirectToUrlPath',
  twPageTypeId: 'twPageTypeId',
  twPageArgument: 'twPageArgument',
  lastmod: 'lastmod',
  priority: 'priority',
  visitedCount: 'visitedCount',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  visitedAt: 'visitedAt'
};

exports.Prisma.TwPageTypeScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  priority: 'priority'
};

exports.Prisma.SeoArticleTypeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug'
};

exports.Prisma.BlogDescriptionScalarFieldEnum = {
  id: 'id',
  agcyBlogsId: 'agcyBlogsId',
  agcyGalleriesId: 'agcyGalleriesId',
  typeSlug: 'typeSlug',
  ordinal: 'ordinal',
  description: 'description',
  imageDescription: 'imageDescription',
  createdAt: 'createdAt',
  createdByAgencyMemberId: 'createdByAgencyMemberId',
  updatedAt: 'updatedAt',
  updatedByAgencyMemberId: 'updatedByAgencyMemberId',
  deletedAt: 'deletedAt',
  deletedByAgencyMemberId: 'deletedByAgencyMemberId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  passwordHash: 'passwordHash',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TourOrderScalarFieldEnum = {
  id: 'id',
  orderReference: 'orderReference',
  productTourwowCode: 'productTourwowCode',
  productTourCode: 'productTourCode',
  periodStartAt: 'periodStartAt',
  periodEndAt: 'periodEndAt',
  productId: 'productId',
  periodId: 'periodId',
  supplierId: 'supplierId',
  tourName: 'tourName',
  tourCountry: 'tourCountry',
  tourDurationDays: 'tourDurationDays',
  tourDurationNights: 'tourDurationNights',
  basePrice: 'basePrice',
  totalAmount: 'totalAmount',
  depositAmount: 'depositAmount',
  remainingAmount: 'remainingAmount',
  currency: 'currency',
  adultCount: 'adultCount',
  childWithBedCount: 'childWithBedCount',
  childNoBedCount: 'childNoBedCount',
  infantCount: 'infantCount',
  singleRoomCount: 'singleRoomCount',
  extraRoomCount: 'extraRoomCount',
  bookerTitle: 'bookerTitle',
  bookerFirstNameTh: 'bookerFirstNameTh',
  bookerLastNameTh: 'bookerLastNameTh',
  bookerFirstNameEn: 'bookerFirstNameEn',
  bookerLastNameEn: 'bookerLastNameEn',
  bookerPhone: 'bookerPhone',
  bookerEmail: 'bookerEmail',
  bookerDateOfBirth: 'bookerDateOfBirth',
  bookerAddress: 'bookerAddress',
  bookerProvince: 'bookerProvince',
  bookerPostalCode: 'bookerPostalCode',
  specialRequests: 'specialRequests',
  dietaryRequirements: 'dietaryRequirements',
  medicalConditions: 'medicalConditions',
  orderStatus: 'orderStatus',
  paymentStatus: 'paymentStatus',
  paymentDeadline: 'paymentDeadline',
  documentDeadline: 'documentDeadline',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  confirmedAt: 'confirmedAt',
  cancelledAt: 'cancelledAt',
  completedAt: 'completedAt',
  userId: 'userId'
};

exports.Prisma.OrderTravelerScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  travelerType: 'travelerType',
  title: 'title',
  firstNameTh: 'firstNameTh',
  lastNameTh: 'lastNameTh',
  firstNameEn: 'firstNameEn',
  lastNameEn: 'lastNameEn',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  phone: 'phone',
  email: 'email',
  passportNumber: 'passportNumber',
  passportExpiry: 'passportExpiry',
  passportNationality: 'passportNationality',
  passportIssueCountry: 'passportIssueCountry',
  seatPreference: 'seatPreference',
  mealPreference: 'mealPreference',
  specialNeeds: 'specialNeeds',
  price: 'price',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderPaymentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  paymentType: 'paymentType',
  paymentMethod: 'paymentMethod',
  paymentProvider: 'paymentProvider',
  transactionId: 'transactionId',
  referenceNumber: 'referenceNumber',
  amount: 'amount',
  currency: 'currency',
  exchangeRate: 'exchangeRate',
  paymentStatus: 'paymentStatus',
  gatewayResponse: 'gatewayResponse',
  bankResponse: 'bankResponse',
  receiptNumber: 'receiptNumber',
  invoiceNumber: 'invoiceNumber',
  requestedAt: 'requestedAt',
  processedAt: 'processedAt',
  completedAt: 'completedAt',
  failedAt: 'failedAt',
  refundedAt: 'refundedAt',
  paymentNotes: 'paymentNotes',
  failureReason: 'failureReason'
};

exports.Prisma.OrderDocumentScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  documentType: 'documentType',
  documentTitle: 'documentTitle',
  documentDescription: 'documentDescription',
  fileName: 'fileName',
  originalFileName: 'originalFileName',
  filePath: 'filePath',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  isGenerated: 'isGenerated',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderNoteScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  noteType: 'noteType',
  subject: 'subject',
  content: 'content',
  isInternal: 'isInternal',
  authorType: 'authorType',
  authorName: 'authorName',
  authorId: 'authorId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TwOrderScalarFieldEnum = {
  id: 'id',
  periodId: 'periodId',
  departureDate: 'departureDate',
  returnDate: 'returnDate',
  pricePerPerson: 'pricePerPerson',
  travelerCount: 'travelerCount',
  totalAmount: 'totalAmount',
  depositAmount: 'depositAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  basePrice: 'basePrice',
  extraRooms: 'extraRooms',
  isEdited: 'isEdited',
  address: 'address',
  tourProgramId: 'tourProgramId',
  tourName: 'tourName',
  subDistrict: 'subDistrict',
  district: 'district',
  province: 'province',
  postalCode: 'postalCode',
  status: 'status',
  selectedPackage: 'selectedPackage',
  customerName: 'customerName',
  customerPhone: 'customerPhone',
  customerEmail: 'customerEmail'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  ProductPool: 'ProductPool',
  AgencyBlog: 'AgencyBlog',
  SeoArticle: 'SeoArticle',
  TwPage: 'TwPage',
  TwPageType: 'TwPageType',
  SeoArticleType: 'SeoArticleType',
  BlogDescription: 'BlogDescription',
  User: 'User',
  TourOrder: 'TourOrder',
  OrderTraveler: 'OrderTraveler',
  OrderPayment: 'OrderPayment',
  OrderDocument: 'OrderDocument',
  OrderNote: 'OrderNote',
  TwOrder: 'TwOrder'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
